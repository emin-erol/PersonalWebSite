@model List<ResultContactMailDto>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Areas/Admin/Views/UILayout/Index.cshtml";
    int count = 0;

    string ShortenMessage(string message)
    {
        if (string.IsNullOrEmpty(message)) return "";

        int dotIndex = message.IndexOf('.');
        string shortenedMessage = dotIndex > -1 ? message.Substring(0, dotIndex + 1) : message;

        if (shortenedMessage.Length > 100)
        {
            shortenedMessage = shortenedMessage.Substring(0, 100);
        }

        if (shortenedMessage.Length < message.Length)
        {
            shortenedMessage += "...";
        }

        return shortenedMessage;
    }
}

<style>
    .select-column {
        display: none;
    }

    .highlighted-row {
        background-color: #d1ecf1;
    }

    .clickable-row {
        transition: background-color 0.3s ease;
        cursor: pointer;
    }

        .clickable-row:hover {
            background-color: #f0f0f0;
        }

    .mail-checkbox {
        cursor: pointer;
    }

    .unread-mail td {
        font-weight: bold;
    }
</style>

<div class="page-content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-xl-12">
                <div class="card">
                    <div class="card-body">
                        <div class="d-flex justify-content-between align-items-center mb-4">
                            <h4 class="card-title">Mailler</h4>
                            <div class="d-flex justify-content-end align-items-center mb-4 gap-2">
                                <div id="actionButtons" class="mx-2" style="display: none;">
                                    <button id="deleteSelected" class="btn btn-outline-danger mr-1">Sil</button>
                                    <button id="markAsReadSelected" class="btn btn-outline-success mr-1">Okundu Olarak İşaretle</button>
                                    <button id="markAll" class="btn btn-outline-secondary">Tümünü İşaretle</button>
                                </div>
                                <button id="filterButton" class="btn btn-outline-warning mr-2" data-bs-toggle="modal" data-bs-target="#filterModal">Filtrele</button>
                                <button id="sorterButton" class="btn btn-outline-secondary mr-2" data-bs-toggle="modal" data-bs-target="#sorterModal">Sırala</button>
                                <button id="toggleSelect" class="btn btn-outline-primary">Seç</button>
                            </div>
                        </div>
                        <p class="card-subtitle mb-4">
                            Kullanıcılar tarafından gönderilen mail ve ilgili bilgileri inceleyebilirsiniz.
                        </p>
                        <div class="table-responsive">
                            <table class="table mb-0">
                                <thead>
                                    <tr>
                                        <th style="display: none;" class="select-column"></th>
                                        <th>#</th>
                                        <th>Ad Soyad</th>
                                        <th>Eposta</th>
                                        <th>Konu</th>
                                        <th>Mesaj</th>
                                        <th>Gönderim Tarihi</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model)
                                    {
                                        count++;
                                        var isUnreadClass = item.IsRead == false ? "unread-mail" : "";
                                        <tr class="clickable-row @isUnreadClass mail-row" data-toggle="modal" data-target="#mailModal"
                                            data-id="@item.ContactMailId" data-name="@item.Name" data-email="@item.Email"
                                            data-subject="@item.Subject" data-message="@item.Message" data-date="@item.ShippingDate" data-isread="@item.IsRead">
                                            <td style="display: none;" class="select-column">
                                                <input type="checkbox" class="mail-checkbox" onchange="highlightRow(this)">
                                            </td>
                                            <td>@count</td>
                                            <td class="mail-name">@item.Name</td>
                                            <td class="mail-email">@item.Email</td>
                                            <td class="mail-subject">@item.Subject</td>
                                            <td class="mail-message">@ShortenMessage(item.Message!)</td>
                                            <td class="mail-date" data-date="@item.ShippingDate.ToString("yyyy-MM-dd")">@item.ShippingDate.ToString("dd.MM.yyyy")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="mailModal" tabindex="-1" role="dialog" aria-labelledby="mailModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="mailModalLabel">Mail Detayları</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <p><strong>Ad Soyad:</strong> <span id="modalName"></span></p>
                <p><strong>Gönderim Tarihi:</strong> <span id="modalDate"></span></p>
                <p><strong>Eposta:</strong> <span id="modalEmail"></span></p>
                <p><strong>Konu:</strong> <span id="modalSubject"></span></p>
                <p><strong>Mesaj:</strong></p>
                <p id="modalMessage"></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Kapat</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="filterModal" tabindex="-1" aria-labelledby="filterModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="filterModalLabel">Filtrele</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="filterForm">
                    <div class="mb-3">
                        <label for="filterName" class="form-label">Ad - Soyad</label>
                        <input type="text" id="filterName" class="form-control" placeholder="Ad - Soyad">
                    </div>
                    <div class="mb-3">
                        <label for="filterEmail" class="form-label">Email Adresi</label>
                        <input type="email" id="filterEmail" class="form-control" placeholder="Email Adresi">
                    </div>
                    <div class="mb-3">
                        <label for="filterSubject" class="form-label">Konu</label>
                        <input type="text" id="filterSubject" class="form-control" placeholder="Konu">
                    </div>
                    <div class="mb-3">
                        <label for="filterMessage" class="form-label">Mesaj</label>
                        <input type="text" id="filterMessage" class="form-control" placeholder="Mesaj">
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <label for="filterStartDate" class="form-label">Başlangıç Tarihi</label>
                            <input type="date" id="filterStartDate" class="form-control">
                        </div>
                        <div class="col-md-6">
                            <label for="filterEndDate" class="form-label">Bitiş Tarihi</label>
                            <input type="date" id="filterEndDate" class="form-control">
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button id="clearFilters" type="button" class="btn btn-secondary">Filtreleri Kaldır</button>
                <button id="applyFilters" type="button" class="btn btn-primary">Uygula</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="sorterModal" tabindex="-1" aria-labelledby="sorterModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="sorterModalLabel">Sıralama Ayarları</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="sortDate" class="form-label">Gönderim Tarihine Göre</label>
                    <select id="sortDate" class="form-select">
                        <option value="desc">Yeni tarihten eskiye</option>
                        <option value="asc">Eski tarihten yeniye</option>
                    </select>
                </div>

                <div class="mb-3">
                    <label class="form-label">Okundu Bilgisine Göre</label>
                    <div class="form-check">
                        <input type="radio" id="unreadFirst" name="sortReadStatus" class="form-check-input" value="unreadFirst">
                        <label for="unreadFirst" class="form-check-label">Önce okunmamış mesajları göster</label>
                    </div>
                    <div class="form-check">
                        <input type="radio" id="readFirst" name="sortReadStatus" class="form-check-input" value="readFirst">
                        <label for="readFirst" class="form-check-label">Önce okunmuş mesajları göster</label>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="clearSorter" class="btn btn-outline-secondary">Seçimleri Kaldır</button>
                <button id="applySorter" class="btn btn-primary">Sırala</button>
            </div>
        </div>
    </div>
</div>


<script>
    let isSelectMode = false;

    $(document).ready(function () {
        $('#toggleSelect').click(function () {
            const selectColumns = $('.select-column');
            const checkboxes = $('.mail-checkbox');
            const markAllButton = $('#markAll');

            if (selectColumns.is(':visible')) {
                selectColumns.hide();
                checkboxes.prop('checked', false);
                $('tr').removeClass('highlighted-row');
                markAllButton.text('Tümünü İşaretle');
                $(this).text('Seç');
                isSelectMode = false;
                $('#actionButtons').hide();
            } else {
                selectColumns.show();
                $(this).text('Seçimi Kapat');
                isSelectMode = true;
                $('#actionButtons').show();
            }
        });

        $('.mail-checkbox').on('click', function (e) {
            e.stopPropagation();
            highlightRow(this);
            toggleMarkAllButton();
        });

        $('.clickable-row').on('click', function (e) {
            if (isSelectMode) {
                const checkbox = $(this).find('.mail-checkbox');
                checkbox.prop('checked', !checkbox.prop('checked'));
                highlightRow(checkbox);
                toggleMarkAllButton();
                e.stopPropagation();
            } else {
                showMailDetails(this);
            }
        });

        $('#deleteSelected').click(function () {
            const selectedMailIds = [];

            $('.mail-checkbox:checked').each(function () {
                const mailId = $(this).closest('tr').data('id');
                selectedMailIds.push(mailId);
            });

            if (selectedMailIds.length > 0) {
                Swal.fire({
                    title: 'Emin misiniz?',
                    text: 'Seçili mailler silinecek!',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonText: 'Evet, sil!',
                    cancelButtonText: 'Hayır, iptal et',
                }).then((result) => {
                    if (result.isConfirmed) {
                        $.ajax({
                            url: '/Admin/ContactMail/RemoveBulk',
                            type: 'DELETE',
                            contentType: 'application/json',
                            data: JSON.stringify(selectedMailIds),
                            success: function (response) {
                                if (response.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Başarılı',
                                        text: response.message,
                                        confirmButtonText: 'Tamam',
                                    });

                                    $('.mail-checkbox:checked').each(function () {
                                        $(this).closest('tr').remove();
                                    });

                                    closeSelectionMode();
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Hata',
                                        text: response.message,
                                        confirmButtonText: 'Tamam',
                                    });
                                }
                            },
                            error: function () {
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Hata',
                                    text: 'Silme işlemi başarısız oldu.',
                                    confirmButtonText: 'Tamam',
                                });
                            },
                        });
                    }
                });
            } else {
                Swal.fire({
                    icon: 'warning',
                    title: 'Uyarı',
                    text: 'Silinecek mail seçmediniz.',
                    confirmButtonText: 'Tamam',
                });
            }
        });

        $('#markAsReadSelected').click(function () {
            const selectedMailIds = [];

            $('.mail-checkbox:checked').each(function () {
                const mailId = $(this).closest('tr').data('id');
                const isUnread = $(this).closest('tr').hasClass('unread-mail');

                if (isUnread) {
                    selectedMailIds.push(mailId);
                }
            });

            if (selectedMailIds.length > 0) {
                selectedMailIds.forEach(mailId => {
                    $.ajax({
                        url: '/Admin/ContactMail/MarkMailAsRead/' + mailId,
                        type: 'POST',
                        success: function () {
                            $('tr[data-id="' + mailId + '"]').removeClass('unread-mail');
                        },
                        error: function () {
                            console.error('Mail işaretlenemedi: ID = ' + mailId);
                        }
                    });
                });

                Swal.fire({
                    icon: 'success',
                    title: 'Başarılı',
                    text: 'Seçilen okunmamış mailler okundu olarak işaretlendi.',
                    confirmButtonText: 'Tamam'
                });

                closeSelectionMode();
            } else {
                Swal.fire({
                    icon: 'warning',
                    title: 'Uyarı',
                    text: 'Okunmamış olarak işaretlenecek bir mail seçmediniz.',
                    confirmButtonText: 'Tamam'
                });
            }
        });

        $('#markAll').click(function () {
            const button = $(this);
            const checkboxes = $('.mail-checkbox');

            if (button.text() === 'Tümünü İşaretle') {
                checkboxes.each(function () {
                    $(this).prop('checked', true);
                    highlightRow(this);
                });
                button.text('İşaretleri Kaldır');
            } else {
                checkboxes.each(function () {
                    $(this).prop('checked', false);
                    highlightRow(this);
                });
                button.text('Tümünü İşaretle');
            }
        });

        $('#filterButton').on('click', function () {
            $('#filterModal').modal('show');
        });

        $('#applyFilters').click(function () {
            const filterName = $('#filterName').val().toLowerCase();
            const filterEmail = $('#filterEmail').val().toLowerCase();
            const filterSubject = $('#filterSubject').val().toLowerCase();
            const filterMessage = $('#filterMessage').val().toLowerCase();
            const filterStartDate = $('#filterStartDate').val();
            const filterEndDate = $('#filterEndDate').val();

            $('table tbody tr').each(function () {
                const name = $(this).find('.mail-name').text().toLowerCase();
                const email = $(this).find('.mail-email').text().toLowerCase();
                const subject = $(this).find('.mail-subject').text().toLowerCase();
                const message = $(this).find('.mail-message').text().toLowerCase();
                const mailDate = $(this).find('.mail-date').data('date');

                let isVisible = true;

                if (filterName && !name.includes(filterName)) isVisible = false;
                if (filterEmail && !email.includes(filterEmail)) isVisible = false;
                if (filterSubject && !subject.includes(filterSubject)) isVisible = false;
                if (filterMessage && !message.includes(filterMessage)) isVisible = false;
                if (filterStartDate && new Date(mailDate) < new Date(filterStartDate)) isVisible = false;
                if (filterEndDate && new Date(mailDate) > new Date(filterEndDate)) isVisible = false;

                $(this).toggle(isVisible);
            });

            $('#filterModal').modal('hide');
        });

        $('#clearFilters').on('click', function () {
            $('#filterForm')[0].reset();
            $('.mail-row').show();
        });

        $('#sorterButton').on('click', function () {
            $('#sorterModal').modal('show');
        });

        $('#applySorter').click(function () {
            const sortDate = $('#sortDate').val();
            const sortReadStatus = $('input[name="sortReadStatus"]:checked').val();

            const rows = $('table tbody tr').get();

            rows.sort(function (a, b) {
                const dateA = new Date($(a).find('.mail-date').data('date'));
                const dateB = new Date($(b).find('.mail-date').data('date'));
                const isReadA = $(a).data('isread') === true || $(a).data('isread') === 'True';
                const isReadB = $(b).data('isread') === true || $(b).data('isread') === 'True';

                if (sortReadStatus === 'unreadFirst' && isReadA !== isReadB) {
                    return isReadA ? 1 : -1;
                }
                if (sortReadStatus === 'readFirst' && isReadA !== isReadB) {
                    return isReadA ? -1 : 1;
                }

                if (sortDate === 'asc') {
                    return dateA - dateB;
                } else if (sortDate === 'desc') {
                    return dateB - dateA;
                }

                return 0;
            });


            $.each(rows, function (index, row) {
                $('table tbody').append(row);
            });

            $('#sorterModal').modal('hide');
        });

        $('#clearSorter').click(function () {
            $('#sortDate').val('desc');
            $('input[name="sortReadStatus"]').prop('checked', false);

            const rows = $('table tbody tr').get();
            $.each(rows, function (index, row) {
                $('table tbody').append(row);
            });
        });

        function closeSelectionMode() {
            $('#toggleSelect').text('Seç');
            $('.select-column').hide();
            $('.mail-checkbox').prop('checked', false);
            $('tr').removeClass('highlighted-row');
            $('#markAll').text('Tümünü İşaretle');
            $('#actionButtons').hide();
            isSelectMode = false;
        }

        function toggleMarkAllButton() {
            const checkboxes = $('.mail-checkbox');
            const allChecked = checkboxes.length === checkboxes.filter(':checked').length;
            const markAllButton = $('#markAll');

            if (allChecked) {
                markAllButton.text('İşaretleri Kaldır');
            } else {
                markAllButton.text('Tümünü İşaretle');
            }
        }

        function showMailDetails(element) {
            var mailId = $(element).data('id');
            var mailName = $(element).data('name');
            var mailEmail = $(element).data('email');
            var mailSubject = $(element).data('subject');
            var mailMessage = $(element).data('message');
            var mailDate = $(element).data('date');
            var isRead = $(element).hasClass('unread-mail');

            $('#modalName').text(mailName);
            $('#modalEmail').text(mailEmail);
            $('#modalSubject').text(mailSubject);
            $('#modalMessage').text(mailMessage);
            $('#modalDate').text(mailDate);

            if (!isSelectMode && isRead) {
                markMailAsRead(mailId, element);
            }
        }

        function markMailAsRead(mailId, element) {
            $.ajax({
                url: '/Admin/ContactMail/MarkMailAsRead/' + mailId,
                type: 'POST',
                success: function (response) {
                    $(element).removeClass('unread-mail');
                },
                error: function (error) {
                    console.error('Mail işaretlenemedi:', error);
                }
            });
        }
    });

    function highlightRow(checkbox) {
        const row = $(checkbox).closest('tr');
        if ($(checkbox).is(':checked')) {
            row.addClass('highlighted-row');
        } else {
            row.removeClass('highlighted-row');
        }
    }
</script>
